Side effect are the method generally used to do other rask than rendering the the JSX
element. Using state multiple time one inside another may cause sometime to reiterate and
goes into an infinite loop which is problematic. For this w e will use the useEffect
hook many time to the task

Handling SideEffect with useEffect:
useEffect(() => {...},[dependencies]);
lmbda fucntion inside the useEffect function should be executed after after every
component evaluation if the specified dependenciesn changed. Side effect code goes into
lambda function.
dependencies are the list of dependencies of this effect function only runs if the 
dependencies changed. Specify our dependencies of our function here.
Side effect are mostly used to handle http request to not upadate entire page rather
based on a request updating a component just like AJAX. 
Side effect can also be used to upadate some component on some cahnging effect like form
validation etc.

We learned, that you should add "everything" we use in the effect function as a
dependency - i.e. all state variables and functions you use in there.

That is correct, but there are a few exceptions you should be aware of:

We DON'T need to add state updating functions (as we did in the setFormIsValid): 
React guarantees that those functions never change, hence you don't need to add 
them as dependencies (you could though).

we also DON'T need to add "built-in" APIs or functions like fetch(), localStorage etc 
(functions and features built-into the browser and hence available globally): 
These browser APIs / global functions are not related to the React component 
render cycle and they also never change.

We also DON'T need to add variables or functions you might've defined OUTSIDE of our 
components (e.g. if we create a new helper function in a separate file): Such functions
or variables also are not created inside of a component function and hence changing 
them won't affect our components (components won't be re-evaluated if such variables 
or functions change and vice-versa).

So long story short: We must add all "things" we use in our effect function if those 
"things" could change because our component (or some parent component) re-rendered.
That's why variables or state defined in component functions, props or functions 
defined in component functions have to be added as dependencies!

Here's a made-up dummy example to further clarify the above-mentioned scenarios:

import { useEffect, useState } from 'react';
 
let myTimer;
 
const MyComponent = (props) => {
  const [timerIsActive, setTimerIsActive] = useState(false);
 
  const { timerDuration } = props; // using destructuring to pull out specific props values
 
  useEffect(() => {
    if (!timerIsActive) {
      setTimerIsActive(true);
      myTimer = setTimeout(() => {
        setTimerIsActive(false);
      }, timerDuration);
    }
  }, [timerIsActive, timerDuration]);
};
In this example:

timerIsActive is added as a dependency because it's component state that may change 
when the component changes (e.g. because the state was updated).

timerDuration is added as a dependency because it's a prop value of that component - 
so it may change if a parent component changes that value (causing this MyComponent
component to re-render as well)

setTimerIsActive is NOT added as a dependency because it's that exception: State 
updating functions could be added but don't have to be added since React guarantees 
that the functions themselves never change.

myTimer is NOT added as a dependency because it's not a component-internal variable 
(i.e. not some state or a prop value) - it's defined outside of the component and 
changing it (no matter where) wouldn't cause the component to be re-evaluated.

setTimeout is NOT added as a dependency because it's a built-in API (built-into the 
browser) - it's independent from React and your components, it doesn't change.


Debouncing is technique used to run useEffect after some inteval of time, rather than
constant running of useEffect, inside which may be time consuming and costly method
exist. We do it using async setTimeout function
useEffect can return a cleanup function

Clean up function can run before every useEffect function run. And it does not run 
before first useEffect run